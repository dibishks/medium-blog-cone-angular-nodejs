Here‚Äôs a **complete, high-quality software specification prompt template** you can directly feed to **ChatGPT/Copilot** to **start building a full-stack blog application** with **Node.js backend**, **Angular frontend**, and **MongoDB** as the database.

---

## üß† Copilot Prompt Template: Full-Stack Blog Platform (Node.js + Angular + MongoDB)

> ‚ú® Use this as a ready-to-go project prompt for ChatGPT or GitHub Copilot.

---

### üßæ Project Title

**Medium-like Blog Platform**

---

### ‚úÖ Objective

Build a full-stack blog web application where users can sign up, create blogs, edit their profiles, and browse posts with tag filters. The app will have a responsive Angular frontend, Node.js + Express backend, and MongoDB database.

---

### üß© Tech Stack

* **Frontend:** Angular 17
* **Backend:** Node.js (Express.js)
* **Database:** MongoDB (Mongoose ODM)
* **Authentication:** JWT-based Auth
* **Deployment:** Dockerized with Docker Compose (optional)
* **Optional:** Use Tailwind CSS for Angular styling

---

### üñ•Ô∏è Frontend Specification (Angular)

**Pages/Views:**

* **Home Feed** ‚Äì List of all published blogs with pagination and tags filter
* **Login** / **Signup** ‚Äì Auth forms
* **Create Blog** ‚Äì Blog editor form with title, body, and tags
* **Edit Blog** ‚Äì Edit existing blog post (if user is the owner)
* **User Profile** ‚Äì User bio, avatar, and list of their posts
* **View Blog** ‚Äì View full blog with author info and tags

**Components:**

* Header with navigation (Login/Logout/Profile)
* Blog Card (for list view)
* Blog Editor Form
* Tag Selector
* Profile Editor Form
* Pagination component
* Auth Guard for protected routes

**State Management (Optional):**

* Use Angular Services for shared state (AuthService, BlogService)
* LocalStorage for JWT tokens

**API Integration:**
Use Angular‚Äôs `HttpClientModule` to connect with the backend using JWT-authenticated APIs.

---

### üõ†Ô∏è Backend Specification (Node.js + Express)

**API Endpoints**

`Auth`

* `POST /api/auth/signup` ‚Äì Register new user
* `POST /api/auth/login` ‚Äì Login and return JWT
* `GET /api/auth/me` ‚Äì Get logged-in user info

`Users`

* `GET /api/users/:id` ‚Äì Get user profile
* `PUT /api/users/:id` ‚Äì Update profile (bio, avatar, name)

`Blogs`

* `GET /api/blogs` ‚Äì List all published blogs (with pagination & optional tag filter)
* `GET /api/blogs/:id` ‚Äì View single blog
* `POST /api/blogs` ‚Äì Create blog (auth required)
* `PUT /api/blogs/:id` ‚Äì Edit blog (only if user is owner)
* `DELETE /api/blogs/:id` ‚Äì Delete blog
* `GET /api/tags` ‚Äì List all tags used

**Middlewares:**

* Auth middleware (JWT verify)
* Error handler middleware
* Input validation using `express-validator` or `joi`

**Controllers:**
Split into folders (`authController.js`, `userController.js`, `blogController.js`)

---

### üóÉÔ∏è Database Schema (MongoDB with Mongoose)

**User**

```ts
{
  username: String,
  email: String,
  passwordHash: String,
  bio: String,
  avatarUrl: String,
  createdAt: Date
}
```

**Blog**

```ts
{
  title: String,
  body: String,
  tags: [String],
  author: mongoose.Schema.Types.ObjectId (ref: 'User'),
  published: Boolean,
  createdAt: Date,
  updatedAt: Date
}
```

**Tag** (Optional collection if needed for optimization)

```ts
{
  name: String,
  count: Number
}
```

---

### üß™ Testing (Optional)

* **Backend:** Jest + Supertest
* **Frontend:** Angular TestBed (unit tests for services/components)

---

### üîê Authentication Flow

1. User signs up or logs in ‚Üí gets JWT
2. Frontend stores JWT in `localStorage`
3. Protected API routes use `Authorization: Bearer <token>`
4. Backend verifies token and attaches user to `req.user`

---

### üê≥ Docker & Deployment (Optional but recommended)

* Create `Dockerfile` for Angular & Node.js
* Use Docker Compose to run frontend, backend, and MongoDB services
* Example ports: Angular ‚Üí 4200, Node.js ‚Üí 3000, MongoDB ‚Üí 27017

---

### ‚úÖ Extra Features (Optional Scope Expansion)

* Blog like/bookmark system
* Search blogs by title/content
* Comment system
* Markdown support in blog body
* Dark mode in frontend
* Admin dashboard (for moderation)

---

Would you like me to convert this into a `.md` file or generate the actual file/folder structure as code too?
